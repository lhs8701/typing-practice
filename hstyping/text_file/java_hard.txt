import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import java.util.ArrayList;
public class DynamicBeat extends JFrame
private Image screenImage;
private Graphics screenGraphic;
private int mouseX, mouseY;
private boolean isMain = false;
private boolean isGameScreen = false;
private JButton exitButton = new JButton(exitButtonBasicImage);
private Music selectedMusic;
ArrayList<Track> trackList = new ArrayList<Track>();
private int nowSelected = 0;
public DynamicBeat()
enterMain();
exitButton.setBounds(1245, 0, 30, 30);
exitButton.setBorderPainted(false);
exitButton.setContentAreaFilled(false);
exitButton.setFocusPainted(false);
exitButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
exitButton.setIcon(exitButtonEnteredImage);
exitButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
exitButton.setIcon(exitButtonBasicImage);
exitButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
Thread.sleep(1000);
catch (InterruptedException ex)
ex.printStackTrace();
System.exit(0);
add(exitButton);
menuBar.setBounds(0, 0, 1280, 30);
menuBar.addMouseListener(new MouseAdapter()
public void mousePressed(MouseEvent e)
mouseX = e.getX();
mouseY = e.getY();
menuBar.addMouseMotionListener(new MouseMotionAdapter()
public void mouseDragged(MouseEvent e)
int x = e.getXOnScreen();
int y = e.getYOnScreen();
setLocation(x - mouseX, y - mouseY);
add(menuBar);
selectedMusic = new Music("introMusic.mp3", true);
selectedMusic.start();
startButton.setBounds(40, 400, 400, 100);
startButton.setBorderPainted(false);
startButton.setContentAreaFilled(false);
startButton.setFocusPainted(false);
startButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
startButton.setIcon(startButtonEnteredImage);
startButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
startButton.setIcon(startButtonBasicImage);
startButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
isMain = true;
startButton.setVisible(false);
quitButton.setVisible(false);
leftButton.setVisible(true);
rightButton.setVisible(true);
easyButton.setVisible(true);
hardButton.setVisible(true);
selectTrack(0);
add(startButton);
quitButton.setBounds(40, 530, 400, 100);
quitButton.setBorderPainted(false);
quitButton.setContentAreaFilled(false);
quitButton.setFocusPainted(false);
quitButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
quitButton.setIcon(quitButtonEnteredImage);
quitButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
quitButton.setIcon(quitButtonBasicImage);
quitButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
Thread.sleep(1000);
catch (InterruptedException ex)
ex.printStackTrace();
System.exit(0);
add(quitButton);
rightButton.setVisible(false);
rightButton.setBounds(1080, 310, 100, 100);
rightButton.setBorderPainted(false);
rightButton.setContentAreaFilled(false);
rightButton.setFocusPainted(false);
rightButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
rightButton.setIcon(rightButtonEnteredImage);
rightButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
rightButton.setIcon(rightButtonBasicImage);
rightButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
selectRight();
add(rightButton);
leftButton.setVisible(false);
leftButton.setBounds(140, 310, 100, 100);
leftButton.setBorderPainted(false);
leftButton.setContentAreaFilled(false);
leftButton.setFocusPainted(false);
leftButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
leftButton.setIcon(leftButtonEnteredImage);
leftButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
leftButton.setIcon(leftButtonBasicImage);
leftButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
selectLeft();
add(leftButton);
easyButton.setVisible(false);
easyButton.setBounds(375, 580, 250, 67);
easyButton.setBorderPainted(false);
easyButton.setContentAreaFilled(false);
easyButton.setFocusPainted(false);
easyButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
easyButton.setIcon(easyButtonEnteredImage);
easyButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
easyButton.setIcon(easyButtonBasicImage);
easyButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
gameStart("easy");
add(easyButton);
hardButton.setVisible(false);
hardButton.setBounds(655, 580, 250, 67);
hardButton.setBorderPainted(false);
hardButton.setContentAreaFilled(false);
hardButton.setFocusPainted(false);
hardButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
hardButton.setIcon(hardButtonEnteredImage);
hardButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
hardButton.setIcon(hardButtonBasicImage);
hardButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
gameStart("hard");
add(hardButton);
backButton.setVisible(false);
backButton.setBounds(20, 50, 60, 60);
backButton.setBorderPainted(false);
backButton.setContentAreaFilled(false);
backButton.setFocusPainted(false);
backButton.addMouseListener(new MouseAdapter()
public void mouseEntered(MouseEvent e)
backButton.setIcon(backButtonEnteredImage);
backButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
Music buttonEnteredMusic = new Music("buttonEnteredMusic.mp3", false);
buttonEnteredMusic.start();
public void mouseExited(MouseEvent e)
backButton.setIcon(backButtonBasicImage);
backButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
public void mousePressed(MouseEvent e)
Music buttonEnteredMusic = new Music("buttonPressedMusic.mp3", false);
buttonEnteredMusic.start();
backMain();
add(backButton);
public void paint(Graphics g)
screenImage = createImage(Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
screenGraphic = screenImage.getGraphics();
screenDraw((Graphics2D)screenGraphic);
g.drawImage(screenImage, 0, 0, null);
public void screenDraw(Graphics2D g)
g.drawImage(background, 0, 0, null);
if (isMain)
g.drawImage(selectedImage, 400, 180, null);
g.drawImage(titleImage, 340, 65, null);
if (isGameScreen)
g.drawImage(gameInfo, 0, 660, null);
g.setColor(Color.white);
g.setFont(new Font("Arial", Font.BOLD, 30));
g.drawString("Avicii - Waiting For Love", 20, 702);
g.drawString("Easy", 1190, 702);
g.setColor(Color.lightGray);
g.setFont(new Font("Elephant", Font.BOLD, 30));
g.drawString("000000", 565, 702);
g.setFont(new Font("Arial", Font.BOLD, 26));
g.setColor(Color.darkGray);
g.drawString("S", 270, 609);
g.drawString("D", 374, 609);
g.drawString("F", 478, 609);
g.drawString("Space Bar", 580, 609);
g.drawString("J", 784, 609);
g.drawString("K", 889, 609);
g.drawString("L", 993, 609);
paintComponents(g);
this.repaint();
public void enterMain()
setUndecorated(true);
setTitle("Dynamic Beat");
setSize(Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
setResizable(false);
setLocationRelativeTo(null);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setVisible(true);
setBackground(new Color(0, 0, 0, 0));
setLayout(null);
public void selectTrack(int nowSelected)
if (selectedMusic != null)
selectedMusic.close();
selectedMusic.start();
public void selectRight()
if (nowSelected == trackList.size() - 1)
nowSelected = 0;
else
nowSelected++;
selectTrack(nowSelected);
public void selectLeft()
if (nowSelected == 0)
nowSelected = trackList.size() - 1;
else
nowSelected--;
selectTrack(nowSelected);
public void gameStart(String mode)
if (selectedMusic != null)
selectedMusic.close();
isMain = false;
isGameScreen = true;
leftButton.setVisible(false);
rightButton.setVisible(false);
easyButton.setVisible(false);
hardButton.setVisible(false);
backButton.setVisible(true);
public void backMain()
if (selectedMusic != null)
selectedMusic.close();
selectTrack(nowSelected);
isMain = true;
isGameScreen = false;
backButton.setVisible(false);
leftButton.setVisible(true);
rightButton.setVisible(true);
easyButton.setVisible(true);
hardButton.setVisible(true);